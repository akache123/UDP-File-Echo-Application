CSE 156/L Programming Lab 2 - File Echo Application using UDP Documentation

Author: Anurag Kache
Student ID: 1801243

-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
Files:
-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------1. src/ 
Contains source files for the client and server.
- myserver.cpp
- myclient.cpp

2. bin/ 
Executable generated by the Makefile.
- myserver
- myclient
- myserver.o
- myclient.o

3. doc/ 
Documentation of your application in plain text or PDF format, containing information on the internal design, usage instructions, and limitations. It should also list the files in the submission with a brief description.
- README.pdf

4. Makefile 
Used to build the client program from the required source files.

-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
Documentation
-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------

1. **Introduction**
   - The project involves creating a client-server file echo application using UDP to transmit and receive file data. The focus is on reliable packet communication, error handling, and successful file reconstruction.

2. **Overview**
   - The client sends a file to the server using UDP packets. The server echoes the received packets back to the client. The client reassembles the echoed packets to reconstruct the original file.

3. **File Splitting Mechanism**
   - The client breaks the file into mtu-byte sized packets.
   - The mtu is specified by the user and must be adhered to, with a minimum mtu requirement based on the sequencing protocol overhead.

4. **Communication Protocol**
   - UDP is used for communication between the client and server.
   - No transport port numbers are specified in the UDP payload.
   - The server echoes the payload back to the client.

5. **Client Implementation**
   - Reads a local file specified by the user.
   - Splits the file into packets and sends them to the server.
   - Listens for echoed packets, reorders them if necessary, and reassembles the original file.
   - Handles errors, such as packet loss or server unavailability, and exits accordingly.

6. **Server Implementation**
   - Waits for packets from clients.
   - Upon receiving a packet, echoes the payload back to the client.

7. **Error Handling**
   - The client detects packet loss and exits with an error message if necessary.
   - Handles server unavailability and prints an error message.
   - Robust error handling for socket API errors.

8. **Testing**

Test Case 1: Basic File Transmission and Reconstruction
Start the server: ./myserver 9090
Run the client: ./myclient 192.168.122.1 9090 512 test_files/small_text_file.txt output_files/reconstructed_small_text_file.txt
Scenario: The client sends a small text file to the server.
Expected Outcome: The server echoes back the packets, and the client successfully reconstructs the original file without any errors.

Test Case 2: Packet Loss Detection
Start the server: ./myserver 9090
Run the client: ./myclient 192.168.122.1 9090 512 test_files/small_text_file.txt output_files/reconstructed_small_text_file.txt --simulate-packet-loss
Scenario: Introduce simulated packet loss during transmission by disrupting the network or setting a low MTU.
Expected Outcome: The client detects the packet loss, prints an error message, and exits with a non-zero status.

Test Case 3: Server Unavailability
Start the server: ./myserver 9090
Run the client: ./myclient 192.168.122.1 9090 512 test_files/small_text_file.txt output_files/reconstructed_small_text_file.txt
Scenario: Start the server after the client has initiated file transmission.
Expected Outcome: The client should print "Cannot detect server" to stderr and exit with an error if it hasn't received any packets within a reasonable time frame.

Test Case 4: Reordering of Echoed Packets
Start the server: ./myserver 9090
Run the client: ./myclient 192.168.122.1 9090 512 test_files/small_text_file.txt output_files/reconstructed_small_text_file.txt --simulate-packet-reordering
Scenario: The network introduces reordering of packets during transmission.
Expected Outcome: The client handles the reordering, reassembles the file correctly, and exits successfully.

Test Case 5: Large File Transmission
Start the server: ./myserver 9090
Run the client: ./myclient 192.168.122.1 9090 512 test_files/large_binary_file.bin output_files/reconstructed_large_binary_file.bin
Scenario: Transmit a large binary file with a size close to the specified maximum of 1GB.
Expected Outcome: The client successfully handles the transmission of large files, reconstructs the original file, and exits without errors.

Test Case 6: PDF File Transmission and Reconstruction
Start the server: ./myserver 9090
Run the client: ./myclient 127.0.0.1 9090 512 test_files/sample.pdf output_files/reconstructed_sample.pdf
Scenario: The client sends a PDF file to the server.
Expected Outcome: The server echoes back the packets, and the client successfully reconstructs the original PDF file without any errors. The reconstructed PDF file should be identical to the original.

Test Case 7: JPEG File Transmission and Reconstruction
Start the server: ./myserver 9090
Run the client: ./myclient 192.168.122.1 9090 512 test_files/sample.jpg output_files/reconstructed_sample.jpg
Scenario: The client sends a JPEG image file to the server.
Expected Outcome: The server echoes back the packets, and the client successfully reconstructs the original JPEG image without any errors. The reconstructed JPEG file should be identical to the original.


9. **Build Instructions**
   - Use the provided Makefile to build the client program.
   - The executable is generated in the bin directory.

10. **Usage Instructions**
   - Run the server with "./myserver <port>"
   - Run the client with "./myclient <server_ip> <server_port> <mtu> <infile> <outfile>"

11. **Known Limitations**
   - Acknowledge any potential limitations or areas where the implementation may not cover all scenarios.

12. **References**
   - Class Textbook: Unix Network Programming, Volume 1: The Sockets Networking API, 3/EW. Richard Stevens Bill Fenner M. Rudoff
   - https://www.w3schools.com/cybersecurity/cybersecurity_network_transport.php
   - https://www.geeksforgeeks.org/udp-server-client-implementation-c/
   - https://stackoverflow.com/questions/35568996/socket-programming-udp-client-server-in-c
   - ChatGPT to help with overall pseudocode/brainstorming ideas to contruct my code for this project


13. **Submission Information**
   - Submit all files in a compressed tar file following the specified format.

-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
